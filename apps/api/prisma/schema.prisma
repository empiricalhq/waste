generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  male
  female
}

enum Role {
  admin
  supervisor
  driver
  citizen
}

enum AssignmentStatus {
  scheduled
  active
  completed
  cancelled
}

enum RouteStatus {
  active
  inactive
  draft
}

// Better Auth required tables
model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model User {
  id               String    @id @default(cuid())
  name             String
  username         String    @unique
  displayUsername  String?   @map("display_username")
  email            String    @unique
  emailVerified    Boolean   @default(false)
  image            String?
  role             Role      @default(citizen)
  gender           Gender?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  isActive         Boolean   @default(true)
  phoneNumber      String?
  lastLoginAt      DateTime?

  // Relations
  accounts                Account[]
  sessions                Session[]
  citizenProfile          CitizenProfile?
  routesCreated           Route[]               @relation("RouteCreatedBy")
  routesApproved          Route[]               @relation("RouteApprovedBy")
  routeAssignmentsAsDriver RouteAssignment[]    @relation("RouteAssignmentDriver")
  routeAssignmentsAssigned RouteAssignment[]    @relation("RouteAssignmentAssignedBy")
  educationProgress       UserEducationProgress[]

  @@map("user")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verification")
}

// Your existing business tables
model Truck {
  id           String   @id @default(cuid())
  name         String
  licensePlate String   @unique @map("license_plate")
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")

  currentLocation   TruckCurrentLocation?
  locationHistory   TruckLocationHistory[]
  routeAssignments  RouteAssignment[]

  @@map("truck")
}

model TruckCurrentLocation {
  truckId           String   @id @map("truck_id")
  routeAssignmentId String?  @map("route_assignment_id")
  lat               Float
  lng               Float
  speed             Float?
  heading           Float?
  updatedAt         DateTime @default(now()) @map("updated_at")

  truck Truck @relation(fields: [truckId], references: [id], onDelete: Cascade)

  @@map("truck_current_location")
}

model TruckLocationHistory {
  id                String   @id @default(cuid())
  truckId           String   @map("truck_id")
  routeAssignmentId String?  @map("route_assignment_id")
  lat               Float
  lng               Float
  speed             Float?
  heading           Float?
  recordedAt        DateTime @default(now()) @map("recorded_at")

  truck Truck @relation(fields: [truckId], references: [id], onDelete: Cascade)

  @@map("truck_location_history")
}

model Route {
  id                        String      @id @default(cuid())
  name                      String
  description               String?
  startLat                  Float       @map("start_lat")
  startLng                  Float       @map("start_lng")
  estimatedDurationMinutes  Int         @map("estimated_duration_minutes")
  status                    RouteStatus @default(active)
  createdBy                 String      @map("created_by")
  approvedBy                String?     @map("approved_by")
  approvedAt                DateTime?   @map("approved_at")
  createdAt                 DateTime    @default(now()) @map("created_at")
  updatedAt                 DateTime    @updatedAt @map("updated_at")

  creator     User @relation("RouteCreatedBy", fields: [createdBy], references: [id])
  approver    User? @relation("RouteApprovedBy", fields: [approvedBy], references: [id])
  
  assignments RouteAssignment[]
  schedules   RouteSchedule[]
  waypoints   RouteWaypoint[]

  @@map("route")
}

model RouteAssignment {
  id                 String           @id @default(cuid())
  routeId            String           @map("route_id")
  truckId            String           @map("truck_id")
  driverId           String           @map("driver_id")
  assignedDate       DateTime         @map("assigned_date") @db.Date
  scheduledStartTime DateTime         @map("scheduled_start_time")
  scheduledEndTime   DateTime         @map("scheduled_end_time")
  status             AssignmentStatus @default(scheduled)
  actualStartTime    DateTime?        @map("actual_start_time")
  actualEndTime      DateTime?        @map("actual_end_time")
  notes              String?
  assignedBy         String           @map("assigned_by")
  createdAt          DateTime         @default(now()) @map("created_at")

  route      Route @relation(fields: [routeId], references: [id])
  truck      Truck @relation(fields: [truckId], references: [id])
  driver     User  @relation("RouteAssignmentDriver", fields: [driverId], references: [id])
  assignedByUser User @relation("RouteAssignmentAssignedBy", fields: [assignedBy], references: [id])

  @@map("route_assignment")
}

model RouteSchedule {
  routeId   String @map("route_id")
  dayOfWeek Int    @map("day_of_week")
  startTime String @map("start_time") @db.Time

  route Route @relation(fields: [routeId], references: [id], onDelete: Cascade)

  @@id([routeId, dayOfWeek])
  @@map("route_schedule")
}

model RouteWaypoint {
  id                           String @id @default(cuid())
  routeId                      String @map("route_id")
  sequenceOrder                Int    @map("sequence_order")
  lat                          Float
  lng                          Float
  streetName                   String? @map("street_name")
  estimatedArrivalOffsetMinutes Int    @map("estimated_arrival_offset_minutes")

  route Route @relation(fields: [routeId], references: [id], onDelete: Cascade)

  @@map("route_waypoint")
}

model CitizenProfile {
  userId               String   @id @map("user_id")
  lat                  Float?
  lng                  Float?
  streetName           String?  @map("street_name")
  reference            String?
  notificationsEnabled Boolean  @default(true) @map("notifications_enabled")
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("citizen_profile")
}

model UserEducationProgress {
  userId           String   @map("user_id")
  contentId        String   @map("content_id")
  completedAt      DateTime @default(now()) @map("completed_at")
  score            Int?
  timeSpentSeconds Int?     @map("time_spent_seconds")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, contentId])
  @@map("user_education_progress")
}
